/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.Random;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

//

public Hashtable<String, String> variables = new Hashtable<String, String>();
public String v;
public String i;

// public ArrayList<String> para = new ArrayList<String>();
public String n;

public Hashtable<String, ArrayList<String>> funciones = new Hashtable<String, ArrayList<String>>();
public String f;

// Sale un error raro que le mandamos a Diego. No afecta pero igual se imprime.
  final public void instruccion() throws ParseException {
        int numero;
        Token x = null;
        String n;
        int numDegree;
        int i = 0; // Para los ciclos
        salida = new String();
        boolean estaP = true;
        boolean estaV = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE:
      jj_consume_token(MOVE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                         numero = Integer.parseInt(x.image);
                                                                 world.moveForward(numero); salida = "Command: MOVE";
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); System.out.println(estaV); if (estaV == false) {
                                                {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                                else{n = variables.get(token.image);
                                                         numero = Integer.parseInt(n);
                                                         world.moveForward(numero); salida="Command: MOVE";}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                   else{n = variables.get(token.image);
                                           numero = Integer.parseInt(n);
                                               world.moveForward(numero); salida="Command: MOVE";}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case DROP:
      jj_consume_token(DROP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                         numero = Integer.parseInt(x.image);
                                                 world.putChips(numero); salida="Command: DROP";
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                                {if (true) throw new Error("Variable no declarada anteriormente");}}
                                                else{n = variables.get(token.image);
                                                         numero = Integer.parseInt(n);
                                                         world.putChips(numero); salida="Command: DROP";}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                   else{n = variables.get(token.image);
                                                   numero = Integer.parseInt(n);
                                                   world.putChips(numero); salida="Command: DROP";}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case FREE:
      jj_consume_token(FREE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                         numero = Integer.parseInt(x.image);
                                                 world.putBalloons(numero); salida="Command: FREE";
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                                 {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                                 else{n = variables.get(token.image);
                                                      numero = Integer.parseInt(n);
                                                  world.putBalloons(numero); salida="Command: FREE";}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                        {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                        else{n = variables.get(token.image);
                                                                 numero = Integer.parseInt(n);
                                                                 world.putBalloons(numero); salida="Command: FREE";}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case PICK:
      jj_consume_token(PICK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
                     world.pickupChip(); salida="Command: PICK";
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                                {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                                else{world.pickupChip(); salida="Command: PICK";}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                   else{world.pickupChip(); salida="Command: PICK";}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case POP:
      jj_consume_token(POP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                         numero = Integer.parseInt(x.image);
                                                 world.popBalloons(numero);  salida="Command: POP";
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                            {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                                else {n = variables.get(token.image);
                                                      numero = Integer.parseInt(n);
                                                      world.popBalloons(numero); salida="Command: POP";}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                        {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                        else {n = variables.get(token.image);
                                                          numero = Integer.parseInt(n);
                                                                  world.popBalloons(numero); salida="Command: POP";}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case ROTATE:
      jj_consume_token(ROTATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                           Random random = new Random();
                                                   if (random.nextInt(2) == 0){numero = Integer.parseInt(x.image);
                                                                                                   numDegree = (int) numero / 90;
                                                                                                   while (i < numDegree) {i += 1; world.turnRight(); salida = "Command: ROTATE";}}
                                               else{numero = Integer.parseInt(x.image);
                                                    numDegree = (int) numero / 90;
                                                        while (i < (4 - numDegree)) {i += 1; world.turnRight(); salida = "Command: ROTATE";}}
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                                            {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                                            else {Random random1 = new Random();
                                                    if (random1.nextInt(2) == 0){n = variables.get(token.image);
                                                                                                 numero = Integer.parseInt(n);
                                                                                                         numDegree = (int) numero / 90;
                                                                                                         while (i < numDegree) {i += 1; world.turnRight(); salida = "Command: ROTATE";}}
                                                    else{n = variables.get(token.image);
                                                         numero = Integer.parseInt(n);
                                                         numDegree = (int) numero / 90;
                                                             while (i < (4 - numDegree)) {i += 1; world.turnRight(); salida = "Command: ROTATE";}}}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                                   else {Random random2 = new Random();
                                                                   if (random2.nextInt(2) == 0){n = variables.get(token.image);
                                                                                                                     numero = Integer.parseInt(n);
                                                                                                                                 numDegree = (int) numero / 90;
                                                                                                                                 while (i < numDegree) {i += 1; world.turnRight(); salida = "Command: ROTATE";}}
                                                                                  else{n = variables.get(token.image);
                                                                                       numero = Integer.parseInt(n);
                                                                                       numDegree = (int) numero / 90;
                                                                                       while (i < (4 - numDegree)) {i += 1; world.turnRight(); salida = "Command: ROTATE";}}}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case TURNRIGHT:
      jj_consume_token(TURNRIGHT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                               numero = Integer.parseInt(x.image);
                           numDegree = (int) numero / 90;
                         while (i < numDegree){i += 1; world.turnRight(); salida = "Command: RIGHT";}
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                            {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                            else {n = variables.get(token.image);
                                                  numero = Integer.parseInt(n);
                              numDegree = (int) numero / 90;
                              while (i < numDegree){i += 1; world.turnRight(); salida = "Command: RIGHT";}}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                   else {n = variables.get(token.image);
                                                     numero = Integer.parseInt(n);
                                 numDegree = (int) numero / 90;
                                 while (i < numDegree){i += 1; world.turnRight(); salida = "Command: RIGHT";}}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case TURNLEFT:
      jj_consume_token(TURNLEFT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        x = jj_consume_token(INT);
                             numero = Integer.parseInt(x.image);
                         numDegree = (int) numero / 90;
                         while (i < (4 - numDegree)){i += 1; world.turnRight(); salida = "Command: LEFT";}
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                    estaV = variables.containsKey(token.image); if (estaV == false) {
                                            {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
                                            else {n = variables.get(token.image);
                                                  numero = Integer.parseInt(n);
                              numDegree = (int) numero / 90;
                              while (i < (4 - numDegree)){i += 1; world.turnRight(); salida = "Command: LEFT";}}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
                                                   else {n = variables.get(token.image);
                                                         numero = Integer.parseInt(n);
                                 numDegree = (int) numero / 90;
                                 while (i < (4 - numDegree)){i += 1; world.turnRight(); salida = "Command: LEFT";}}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case LOOK:
      jj_consume_token(LOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
                 if (world.facingEast()) {while (i < 3 ){i += 1; world.turnRight(); salida = "Command: LOOK N";}
                } else if (world.facingSouth()) {while (i < 2 ){i += 1; world.turnRight(); salida = "Command: LOOK N";}
                } else if (world.facingWest()) {while (i < 1 ){i += 1; world.turnRight(); salida = "Command: LOOK N";}
                }
        break;
      case 31:
        jj_consume_token(31);
                               if (world.facingNorth()) {while (i < 3 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  } else if (world.facingEast()) {while (i < 2 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  } else if (world.facingSouth()) {while (i < 1 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  }
        break;
      case 32:
        jj_consume_token(32);
                               if (world.facingSouth()) {while (i < 3 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  } else if (world.facingWest()) {while (i < 2 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  } else if (world.facingNorth()) {while (i < 1 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  }
        break;
      case 33:
        jj_consume_token(33);
                               if (world.facingWest()) {while (i < 3 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  } else if (world.facingNorth()) {while (i < 2 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  } else if (world.facingEast()) {while (i < 1 ){i += 1; world.turnRight(); salida = "Command: LOOK W";}
                  }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CHECK:
      jj_consume_token(CHECK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        break;
      case 35:
        jj_consume_token(35);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case NOMB:
        jj_consume_token(NOMB);
                                            estaV = variables.containsKey(token.image); if (estaV == false) {
                                                                                {if (true) throw new Error("Variable no declarada anteriormente:" + "'" + token.image + "'");}}
        break;
      case 28:
        jj_consume_token(28);
        jj_consume_token(NOMB);
                                       estaP = variables.containsKey(token.image); if (estaP == false) {
                                                   {if (true) throw new Error("Par\u00e1metro no declarado anteriormente:" + "'" + token.image + "'");}}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(29);
      break;
    case NOP:
      jj_consume_token(NOP);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public boolean f(StringBuffer sistema) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
      case PIF:
      case DEFINE:
      case REP:
      case TO:
      case NOMB:
      case 38:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
        instruccion();
        break;
      case PIF:
        ifs();
        break;
      case REP:
        repeat();
        break;
      case 38:
        block();
        break;
      case DEFINE:
        def();
        break;
      case TO:
        to();
        break;
      case NOMB:
        funct();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                                          {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Token variable() throws ParseException {
    jj_consume_token(NOMB);
   {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token num() throws ParseException {
    jj_consume_token(INT);
   {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  final public void variables() throws ParseException {
 String tv;
 String ti;
 Token tokenv;
 Token tokeni;
    tokenv = variable();
    tokeni = num();
   tv = tokenv.image;
   ti = tokeni.image;
   variables.put(tv, ti);
  }

  final public void ifs() throws ParseException {
    jj_consume_token(PIF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BLOP:
      jj_consume_token(BLOP);
      break;
    case NOBLOP:
      jj_consume_token(NOBLOP);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(36);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
      case DEFINE:
      case REP:
      case NOMB:
      case 38:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
        ins();
        break;
      case 38:
        block();
        break;
      case DEFINE:
        def();
        break;
      case REP:
        repeat();
        break;
      case NOMB:
        funct();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(37);
    jj_consume_token(29);
  }

  final public void ins() throws ParseException {
    instruccion();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_3;
      }
      instruccion();
    }
  }

  final public void repeat() throws ParseException, Error {
 boolean estaV = true;
    jj_consume_token(REP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case NOMB:
      jj_consume_token(NOMB);
                              estaV = variables.containsKey(token.image); if (estaV == false) {
                                                           {if (true) throw new Error("Variable no declarada anteriormente" + "'" + token.image + "'");}}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(36);
    instruccion();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
      instruccion();
    }
    jj_consume_token(37);
    jj_consume_token(29);
  }

  final public void block() throws ParseException {
    jj_consume_token(38);
    jj_consume_token(BLOCK);
    jj_consume_token(29);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
      case PIF:
      case DEFINE:
      case REP:
      case NOMB:
      case 38:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
        ins();
        break;
      case PIF:
        ifs();
        break;
      case DEFINE:
        def();
        break;
      case REP:
        repeat();
        break;
      case 38:
        block();
        break;
      case NOMB:
        funct();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(39);
    jj_consume_token(29);
  }

  final public void def() throws ParseException {
    jj_consume_token(DEFINE);
    variables();
    jj_consume_token(29);
  }

  final public ArrayList params() throws ParseException {
 ArrayList<String> para = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      jj_consume_token(NOMB);
                para.add(token.image); variables.put(token.image, "");
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_6;
        }
        jj_consume_token(28);
        jj_consume_token(NOMB);
                para.add(token.image); variables.put(token.image, "");
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
   {if (true) return para;}
    throw new Error("Missing return statement in function");
  }

  final public void funct() throws ParseException, Error {
 ArrayList<String> param = new ArrayList<String>();
 boolean esta = true;
 ArrayList<String> llave;
 Token n;
    n = jj_consume_token(NOMB);
                  esta = funciones.containsKey(token.image); if (esta == false) {{if (true) throw new Error("Funcion no declarada: " + "'" + token.image + "'");}}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
             param.add(token.image);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
        jj_consume_token(INT);
                                                param.add(token.image);
      }
      jj_consume_token(29);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
   llave = funciones.get(n.image);
   if (llave.size() == param.size()){
       for (int i = 0; i < param.size(); i++){
         String elemento = (String) param.get(i);
         String nombre = (String) llave.get(i);
         variables.replace(nombre, elemento);
         }
    }else if (llave.size() > param.size()){
        {if (true) throw new Error("Faltan parametros en la funcion");}
    }else{
      {if (true) throw new Error("Hay mas parametros de los esperados en la funcion");}}
  }

  final public void to() throws ParseException {
 Token t;
 ArrayList<String> pa;
    jj_consume_token(TO);
    t = jj_consume_token(NOMB);
    pa = params();
                                        funciones.put(t.image, pa);
    jj_consume_token(29);
    output();
    end();
  }

  final public void output() throws ParseException {
    jj_consume_token(OUTP);
    jj_consume_token(29);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
      case PIF:
      case DEFINE:
      case REP:
      case NOMB:
      case 38:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case DROP:
      case FREE:
      case PICK:
      case POP:
      case TURNRIGHT:
      case TURNLEFT:
      case LOOK:
      case CHECK:
      case ROTATE:
      case NOP:
        instruccion();
        break;
      case PIF:
        ifs();
        break;
      case DEFINE:
        def();
        break;
      case REP:
        repeat();
        break;
      case 38:
        block();
        break;
      case NOMB:
        funct();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void end() throws ParseException {
    jj_consume_token(END);
    jj_consume_token(29);
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x18010000,0x18010000,0x18010000,0x18010000,0x18010000,0x18010000,0x18010000,0x18010000,0xc0000000,0x0,0x18010000,0x7ff0,0x8e27ff0,0x8e27ff0,0xc0000,0x8607ff0,0x8607ff0,0x7ff0,0x8010000,0x7ff0,0x8627ff0,0x8627ff0,0x10000000,0x10000000,0x10000,0x10000,0x8627ff0,0x8627ff0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xc,0x0,0x0,0x40,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x40,0x40,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
