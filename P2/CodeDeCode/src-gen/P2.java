// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/P2.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class P2 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object MIN=null;
  public static Object MAY=null;
  public static Object MOD3=null;
  public static Object MOD5=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=19;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=22;
      MIN=$fix($opIntvlY('a','z'));
      $line=23;
      MAY=$fix($opIntvlY('A','Z'));
      $line=24;
      MOD3=$fix(GCollections.asSet(0,1,2));
      $line=25;
      MOD5=$fix(GCollections.asSet(0,1,2,3,4));
      $line=28;
      Object coder=$fix(P2.createCoder());
      $line=29;
      Object deCoder=$fix(P2.createDecoder());
      $line=34;
      Utilities.testCodeDecode($cast(gold.structures.automaton.ITransducer.class,coder),$cast(gold.structures.automaton.ITransducer.class,deCoder));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"main",$line);
    }
  }
  public static ITransducer createCoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=42;
      Object A=$fix(MIN);
      $line=43;
      Object B=$fix($opCartsY(new Object[]{MIN,MIN}));
      $line=44;
      Object C=$fix($opCartsY(new Object[]{MIN,MIN,GCollections.asSet(':')}));
      $line=45;
      Object D=$fix($opCartsY(new Object[]{MOD5,MOD3,MIN,MIN,GCollections.asSet(':'),MIN}));
      $line=49;
      Object Q=$fix($opUnionY($opUnionY($opUnionY($opUnionY(A,B),C),D),GCollections.asSet("I","E","F")));
      $line=51;
      Object In=$fix($opUnionY(MIN,GCollections.asSet(':','$')));
      $line=52;
      Object Out=$fix($opUnionY($opUnionY($opUnionY(MIN,MAY),GCollections.asSet(':','#')),$opIntvlY('0','4')));
      $line=55;
      Object q_0=$fix("I");
      $line=56;
      Object F=$fix(GCollections.asSet("F"));
      $line=58;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,In,Out,q_0,F,new GMethod(P2.class,"\u03B4"),new GMethod(P2.class,"g"),new GMethod(P2.class,"h")});
      if (true) break $try;
      $line=59;
      $rethrow(new RuntimeException("The function \"createCoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"createCoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=64;
      if (($bool($opEqualY(state,"I"))&&$bool($opMembrY(input,MIN)))) {
        $line=64;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=65;
        if (($bool($opMembrY(state,MIN))&&$bool($opMembrY(input,MIN)))) {
          $line=65;
          $result=GCollections.asList(state,input);
          if (true) break $try;
        }
        else {
          $line=66;
          if (($opEqualY($opAbsolY(state),2)&&$opEqualY(input,':'))) {
            $line=66;
            $result=GCollections.asList($getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),input);
            if (true) break $try;
          }
          else {
            $line=67;
            if (($opEqualY($opAbsolY(state),3)&&$opMembrY(input,MIN))) {
              $line=69;
              if ($bool(($opEqualY(input,$getArrayValue(state,new Object[]{0}))||$opEqualY(input,$getArrayValue(state,new Object[]{1}))))) {
                $line=69;
                $result=GCollections.asList(1,1,$getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2}),input);
                if (true) break $try;
              }
              else {
                $line=70;
                $result=GCollections.asList(0,1,$getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2}),input);
                if (true) break $try;
              }
            }
            else {
              $line=73;
              if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,MIN))) {
                $line=74;
                Object $v1=$getArrayValue(state,new Object[]{0});
                Object $v2=$getArrayValue(state,new Object[]{1});
                Object r=$fix($v1);
                Object i=$fix($v2);
                $line=76;
                if ($bool(($opEqualY(input,$getArrayValue(state,new Object[]{2}))||$opEqualY(input,$getArrayValue(state,new Object[]{3}))))) {
                  $line=76;
                  $result=GCollections.asList($opModulY($opAdditY(r,1),5),$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),input);
                  if (true) break $try;
                }
                else {
                  $line=77;
                  $result=GCollections.asList(r,$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),input);
                  if (true) break $try;
                }
              }
              else {
                $line=80;
                if (($opEqualY($opAbsolY(state),6)&&$opEqualY(input,'$'))) {
                  $line=80;
                  $result="F";
                  if (true) break $try;
                }
                else {
                  $line=82;
                  $result="E";
                  if (true) break $try;
                }
              }
            }
          }
        }
      }
      $line=85;
      $rethrow(new RuntimeException("The function \"\u03B4(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=89;
      $result="";
      if (true) break $try;
      $line=90;
      $rethrow(new RuntimeException("The function \"g(s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=93;
      if (($opEqualY(state,"I")&&$bool($opMembrY(input,MIN)))) {
        $line=93;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=94;
        if (($bool($opMembrY(state,MIN))&&$bool($opMembrY(input,MIN)))) {
          $line=94;
          $result=input;
          if (true) break $try;
        }
        else {
          $line=95;
          if (($opEqualY($opAbsolY(state),2)&&$opEqualY(input,':'))) {
            $line=95;
            $result=':';
            if (true) break $try;
          }
          else {
            $line=97;
            if (($opEqualY($opAbsolY(state),3)&&$opMembrY(input,MIN))) {
              $line=99;
              if ($opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                $line=99;
                $result=$getArrayValue(state,new Object[]{1});
                if (true) break $try;
              }
              else {
                $line=100;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{1}))) {
                  $line=100;
                  $result=$getArrayValue(state,new Object[]{0});
                  if (true) break $try;
                }
                else {
                  $line=101;
                  $result=P2.upperCase(P2.shiftSymbol(input,1));
                  if (true) break $try;
                }
              }
            }
            else {
              $line=104;
              if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,MIN))) {
                $line=106;
                Object $v3=$getArrayValue(state,new Object[]{0});
                Object $v4=$getArrayValue(state,new Object[]{1});
                Object r=$fix($v3);
                Object i=$fix($v4);
                $line=108;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{2}))) {
                  $line=108;
                  $result=$getArrayValue(state,new Object[]{3});
                  if (true) break $try;
                }
                else {
                  $line=109;
                  if ($opEqualY(input,$getArrayValue(state,new Object[]{3}))) {
                    $line=109;
                    $result=$getArrayValue(state,new Object[]{2});
                    if (true) break $try;
                  }
                  else {
                    $line=110;
                    if ($opEqualY(input,$getArrayValue(state,new Object[]{5}))) {
                      $line=110;
                      $result='#';
                      if (true) break $try;
                    }
                    else {
                      $line=111;
                      if ($opEqualY($opModulY($opAdditY($getArrayValue(state,new Object[]{1}),1),3),1)) {
                        $line=111;
                        $result=P2.upperCase(P2.shiftSymbol(input,1));
                        if (true) break $try;
                      }
                      else {
                        $line=112;
                        if ($opEqualY($opModulY($opAdditY($getArrayValue(state,new Object[]{1}),1),3),2)) {
                          $line=112;
                          $result=P2.upperCase(input);
                          if (true) break $try;
                        }
                        else {
                          $line=113;
                          $result=input;
                          if (true) break $try;
                        }
                      }
                    }
                  }
                }
              }
              else {
                $line=116;
                if (($opEqualY($opAbsolY(state),6)&&$opEqualY(input,'$'))) {
                  $line=116;
                  $result=$getArrayValue(state,new Object[]{0});
                  if (true) break $try;
                }
                else {
                  $line=118;
                  $result="";
                  if (true) break $try;
                }
              }
            }
          }
        }
      }
      $line=120;
      $rethrow(new RuntimeException("The function \"h(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"h",$line);
    }
    return $result;
  }
  public static ITransducer createDecoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=140;
      Object A=$fix(MIN);
      $line=141;
      Object B=$fix($opCartsY(new Object[]{MIN,MIN}));
      $line=142;
      Object C=$fix($opCartsY(new Object[]{MIN,MIN,GCollections.asSet(':')}));
      $line=143;
      Object D=$fix($opCartsY(new Object[]{MOD5,MOD3,MIN,MIN,GCollections.asSet(':'),MIN}));
      $line=147;
      Object Q=$fix($opUnionY($opUnionY($opUnionY($opUnionY(A,B),C),D),GCollections.asSet("I","E","F")));
      $line=149;
      Object In=$fix($opUnionY($opUnionY($opUnionY(MIN,MAY),GCollections.asSet(':','#')),$opIntvlY('0','4')));
      $line=150;
      Object Out=$fix($opUnionY(MIN,GCollections.asSet(':','$')));
      $line=153;
      Object q_0=$fix("I");
      $line=154;
      Object F=$fix(GCollections.asSet("F"));
      $line=156;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,In,Out,q_0,F,new GMethod(P2.class,"\u03B41"),new GMethod(P2.class,"g1"),new GMethod(P2.class,"h1")});
      if (true) break $try;
      $line=157;
      $rethrow(new RuntimeException("The function \"createDecoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"createDecoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B41(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=162;
      if (($bool($opEqualY(state,"I"))&&$bool($opMembrY(input,MIN)))) {
        $line=162;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=163;
        if (($bool($opMembrY(state,MIN))&&$bool($opMembrY(input,MIN)))) {
          $line=163;
          $result=GCollections.asList(state,input);
          if (true) break $try;
        }
        else {
          $line=164;
          if (($opEqualY($opAbsolY(state),2)&&$opEqualY(input,':'))) {
            $line=164;
            $result=GCollections.asList($getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),input);
            if (true) break $try;
          }
          else {
            $line=166;
            if (($opEqualY($opAbsolY(state),3)&&$opMembrY(input,MIN))) {
              $line=168;
              if ($bool($opEqualY(input,$getArrayValue(state,new Object[]{0})))) {
                $line=168;
                $result=GCollections.asList(1,1,$getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{1}));
                if (true) break $try;
              }
              else {
                $line=169;
                if ($bool(($opEqualY(input,$getArrayValue(state,new Object[]{1}))||$opEqualY(input,$getArrayValue(state,new Object[]{1}))))) {
                  $line=169;
                  $result=GCollections.asList(1,1,$getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{0}));
                  if (true) break $try;
                }
                else {
                  $line=170;
                  $result="E";
                  if (true) break $try;
                }
              }
            }
            else {
              $line=173;
              if (($opEqualY($opAbsolY(state),3)&&$opMembrY(input,MAY))) {
                $line=173;
                $result=GCollections.asList(0,1,$getArrayValue(state,new Object[]{0}),$getArrayValue(state,new Object[]{1}),$getArrayValue(state,new Object[]{2}),P2.shiftSymbol(P2.lowerCase(input),$opMinusY(1)));
                if (true) break $try;
              }
              else {
                $line=178;
                if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,MIN))) {
                  $line=179;
                  Object $v5=$getArrayValue(state,new Object[]{0});
                  Object $v6=$getArrayValue(state,new Object[]{1});
                  Object r=$fix($v5);
                  Object i=$fix($v6);
                  $line=181;
                  if ($bool($opEqualY(input,$getArrayValue(state,new Object[]{2})))) {
                    $line=181;
                    $result=GCollections.asList($opModulY($opAdditY(r,1),5),$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),$getArrayValue(state,new Object[]{3}));
                    if (true) break $try;
                  }
                  else {
                    $line=182;
                    if ($bool($opEqualY(input,$getArrayValue(state,new Object[]{3})))) {
                      $line=182;
                      $result=GCollections.asList($opModulY($opAdditY(r,1),5),$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),$getArrayValue(state,new Object[]{2}));
                      if (true) break $try;
                    }
                    else {
                      $line=183;
                      $result=GCollections.asList(r,$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),input);
                      if (true) break $try;
                    }
                  }
                }
                else {
                  $line=186;
                  if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,MAY))) {
                    $line=187;
                    Object $v7=$getArrayValue(state,new Object[]{0});
                    Object $v8=$getArrayValue(state,new Object[]{1});
                    Object r=$fix($v7);
                    Object i=$fix($v8);
                    $line=188;
                    if ($opEqualY($opAdditY($getArrayValue(state,new Object[]{1}),$opModulY(1,3)),1)) {
                      $line=188;
                      $result=GCollections.asList(r,$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),P2.shiftSymbol(P2.lowerCase(input),$opMinusY(1)));
                      if (true) break $try;
                    }
                    else {
                      $line=189;
                      if ($opEqualY($opAdditY($getArrayValue(state,new Object[]{1}),$opModulY(1,3)),2)) {
                        $line=189;
                        $result=GCollections.asList(r,$opModulY($opAdditY(i,1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),P2.lowerCase(input));
                        if (true) break $try;
                      }
                      else {
                        $line=190;
                        $result="E";
                        if (true) break $try;
                      }
                    }
                  }
                  else {
                    $line=193;
                    if (($opEqualY($opAbsolY(state),6)&&$opEqualY(input,'#'))) {
                      $line=193;
                      $result=GCollections.asList($getArrayValue(state,new Object[]{0}),$opModulY($opAdditY($getArrayValue(state,new Object[]{1}),1),3),$getArrayValue(state,new Object[]{2}),$getArrayValue(state,new Object[]{3}),$getArrayValue(state,new Object[]{4}),$getArrayValue(state,new Object[]{5}));
                      if (true) break $try;
                    }
                    else {
                      $line=195;
                      if ((($opEqualY($opAbsolY(state),6)&&$opMembrY(input,$opIntvlY('0','4')))&&$opEqualY(Integer.parseInt($cast(java.lang.String.class,input)),$getArrayValue(state,new Object[]{0})))) {
                        $line=195;
                        $result="F";
                        if (true) break $try;
                      }
                      else {
                        $line=197;
                        $result="E";
                        if (true) break $try;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=200;
      $rethrow(new RuntimeException("The function \"\u03B41(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object g1(Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=204;
      $result="";
      if (true) break $try;
      $line=205;
      $rethrow(new RuntimeException("The function \"g1(s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"g1",$line);
    }
    return $result;
  }
  public static Object h1(Object state, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=208;
      if (($opEqualY(state,"I")&&$bool($opMembrY(input,MIN)))) {
        $line=208;
        $result=input;
        if (true) break $try;
      }
      else {
        $line=209;
        if (($bool($opMembrY(state,MIN))&&$bool($opMembrY(input,MIN)))) {
          $line=209;
          $result=input;
          if (true) break $try;
        }
        else {
          $line=210;
          if (($opEqualY($opAbsolY(state),2)&&$opEqualY(input,':'))) {
            $line=210;
            $result=':';
            if (true) break $try;
          }
          else {
            $line=213;
            if (($opEqualY($opAbsolY(state),3)&&$opMembrY(input,MIN))) {
              $line=215;
              if ($opEqualY(input,$getArrayValue(state,new Object[]{0}))) {
                $line=215;
                $result=$getArrayValue(state,new Object[]{1});
                if (true) break $try;
              }
              else {
                $line=216;
                if ($opEqualY(input,$getArrayValue(state,new Object[]{1}))) {
                  $line=216;
                  $result=$getArrayValue(state,new Object[]{0});
                  if (true) break $try;
                }
                else {
                  $line=217;
                  $result=input;
                  if (true) break $try;
                }
              }
            }
            else {
              $line=220;
              if (($opEqualY($opAbsolY(state),3)&&$opMembrY(input,MAY))) {
                $line=220;
                $result=P2.shiftSymbol(P2.lowerCase(input),$opMinusY(1));
                if (true) break $try;
              }
              else {
                $line=223;
                if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,MIN))) {
                  $line=225;
                  Object $v9=$getArrayValue(state,new Object[]{0});
                  Object $v10=$getArrayValue(state,new Object[]{1});
                  Object r=$fix($v9);
                  Object i=$fix($v10);
                  $line=227;
                  if ($opEqualY(input,$getArrayValue(state,new Object[]{2}))) {
                    $line=227;
                    $result=$getArrayValue(state,new Object[]{3});
                    if (true) break $try;
                  }
                  else {
                    $line=228;
                    if ($opEqualY(input,$getArrayValue(state,new Object[]{3}))) {
                      $line=228;
                      $result=$getArrayValue(state,new Object[]{2});
                      if (true) break $try;
                    }
                    else {
                      $line=229;
                      $result=input;
                      if (true) break $try;
                    }
                  }
                }
                else {
                  $line=232;
                  if (($opEqualY($opAbsolY(state),6)&&$opEqualY(input,'#'))) {
                    $line=232;
                    $result=$getArrayValue(state,new Object[]{5});
                    if (true) break $try;
                  }
                  else {
                    $line=234;
                    if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,MAY))) {
                      $line=235;
                      if ($opEqualY($opModulY($opAdditY($getArrayValue(state,new Object[]{1}),1),3),1)) {
                        $line=235;
                        $result=P2.shiftSymbol(P2.lowerCase(input),$opMinusY(1));
                        if (true) break $try;
                      }
                      else {
                        $line=236;
                        if ($opEqualY($opModulY($opAdditY($getArrayValue(state,new Object[]{1}),1),3),2)) {
                          $line=236;
                          $result=P2.lowerCase(input);
                          if (true) break $try;
                        }
                        else {
                          $line=237;
                          $result="";
                          if (true) break $try;
                        }
                      }
                    }
                    else {
                      $line=240;
                      if (($opEqualY($opAbsolY(state),6)&&$opMembrY(input,$opIntvlY('0','4')))) {
                        $line=240;
                        $result='$';
                        if (true) break $try;
                      }
                      else {
                        $line=242;
                        $result="";
                        if (true) break $try;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=244;
      $rethrow(new RuntimeException("The function \"h1(state:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"h1",$line);
    }
    return $result;
  }
  public static Object shiftSymbol(Object symbol, Object shift) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=256;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=257;
      if ($opMembrY(symbol,$opIntvlY('a','z'))) {
        $line=258;
        r=$cast(Character.class,$fix($opAdditY('a',$opModulY($opAdditY($opSubtrY(symbol,'a'),shift),26))));
      }
      else {
        $line=259;
        if ($opMembrY(symbol,$opIntvlY('A','Z'))) {
          $line=260;
          r=$cast(Character.class,$fix($opAdditY('A',$opModulY($opAdditY($opSubtrY(symbol,'A'),shift),26))));
        }
        else {
          $line=261;
          if ($opMembrY(symbol,$opIntvlY('0','9'))) {
            $line=262;
            r=$cast(Character.class,$fix($opAdditY('0',$opModulY($opAdditY($opSubtrY(symbol,'0'),shift),10))));
          }
          else {
            $line=263;
            r=$cast(Character.class,$fix(r));
          }
        }
      }
      $line=265;
      $result=r;
      if (true) break $try;
      $line=266;
      $rethrow(new RuntimeException("The function \"shiftSymbol(symbol:Object,shift:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"shiftSymbol",$line);
    }
    return $result;
  }
  public static Object upperCase(Object minLetter) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=269;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=271;
      if ($opEqualY(minLetter,'a')) {
        $line=271;
        r=$cast(Character.class,$fix('A'));
      }
      else {
        $line=272;
        if ($opEqualY(minLetter,'b')) {
          $line=272;
          r=$cast(Character.class,$fix('B'));
        }
        else {
          $line=273;
          if ($opEqualY(minLetter,'c')) {
            $line=273;
            r=$cast(Character.class,$fix('C'));
          }
          else {
            $line=274;
            if ($opEqualY(minLetter,'d')) {
              $line=274;
              r=$cast(Character.class,$fix('D'));
            }
            else {
              $line=275;
              if ($opEqualY(minLetter,'e')) {
                $line=275;
                r=$cast(Character.class,$fix('E'));
              }
              else {
                $line=276;
                if ($opEqualY(minLetter,'f')) {
                  $line=276;
                  r=$cast(Character.class,$fix('F'));
                }
                else {
                  $line=277;
                  if ($opEqualY(minLetter,'g')) {
                    $line=277;
                    r=$cast(Character.class,$fix('G'));
                  }
                  else {
                    $line=278;
                    if ($opEqualY(minLetter,'h')) {
                      $line=278;
                      r=$cast(Character.class,$fix('H'));
                    }
                    else {
                      $line=279;
                      if ($opEqualY(minLetter,'i')) {
                        $line=279;
                        r=$cast(Character.class,$fix('I'));
                      }
                      else {
                        $line=280;
                        if ($opEqualY(minLetter,'j')) {
                          $line=280;
                          r=$cast(Character.class,$fix('J'));
                        }
                        else {
                          $line=281;
                          if ($opEqualY(minLetter,'k')) {
                            $line=281;
                            r=$cast(Character.class,$fix('K'));
                          }
                          else {
                            $line=282;
                            if ($opEqualY(minLetter,'l')) {
                              $line=282;
                              r=$cast(Character.class,$fix('L'));
                            }
                            else {
                              $line=283;
                              if ($opEqualY(minLetter,'m')) {
                                $line=283;
                                r=$cast(Character.class,$fix('M'));
                              }
                              else {
                                $line=284;
                                if ($opEqualY(minLetter,'n')) {
                                  $line=284;
                                  r=$cast(Character.class,$fix('N'));
                                }
                                else {
                                  $line=285;
                                  if ($opEqualY(minLetter,'o')) {
                                    $line=285;
                                    r=$cast(Character.class,$fix('O'));
                                  }
                                  else {
                                    $line=286;
                                    if ($opEqualY(minLetter,'p')) {
                                      $line=286;
                                      r=$cast(Character.class,$fix('P'));
                                    }
                                    else {
                                      $line=287;
                                      if ($opEqualY(minLetter,'q')) {
                                        $line=287;
                                        r=$cast(Character.class,$fix('Q'));
                                      }
                                      else {
                                        $line=288;
                                        if ($opEqualY(minLetter,'r')) {
                                          $line=288;
                                          r=$cast(Character.class,$fix('R'));
                                        }
                                        else {
                                          $line=289;
                                          if ($opEqualY(minLetter,'s')) {
                                            $line=289;
                                            r=$cast(Character.class,$fix('S'));
                                          }
                                          else {
                                            $line=290;
                                            if ($opEqualY(minLetter,'t')) {
                                              $line=290;
                                              r=$cast(Character.class,$fix('T'));
                                            }
                                            else {
                                              $line=291;
                                              if ($opEqualY(minLetter,'u')) {
                                                $line=291;
                                                r=$cast(Character.class,$fix('U'));
                                              }
                                              else {
                                                $line=292;
                                                if ($opEqualY(minLetter,'v')) {
                                                  $line=292;
                                                  r=$cast(Character.class,$fix('V'));
                                                }
                                                else {
                                                  $line=293;
                                                  if ($opEqualY(minLetter,'w')) {
                                                    $line=293;
                                                    r=$cast(Character.class,$fix('W'));
                                                  }
                                                  else {
                                                    $line=294;
                                                    if ($opEqualY(minLetter,'x')) {
                                                      $line=294;
                                                      r=$cast(Character.class,$fix('X'));
                                                    }
                                                    else {
                                                      $line=295;
                                                      if ($opEqualY(minLetter,'y')) {
                                                        $line=295;
                                                        r=$cast(Character.class,$fix('Y'));
                                                      }
                                                      else {
                                                        $line=296;
                                                        if ($opEqualY(minLetter,'z')) {
                                                          $line=296;
                                                          r=$cast(Character.class,$fix('Z'));
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=299;
      $result=r;
      if (true) break $try;
      $line=300;
      $rethrow(new RuntimeException("The function \"upperCase(minLetter:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"upperCase",$line);
    }
    return $result;
  }
  public static Object lowerCase(Object minLetter) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=304;
      Character r=null;
      r=$defaultValue(Character.class);
      $line=306;
      if ($opEqualY(minLetter,'A')) {
        $line=306;
        r=$cast(Character.class,$fix('a'));
      }
      else {
        $line=307;
        if ($opEqualY(minLetter,'B')) {
          $line=307;
          r=$cast(Character.class,$fix('b'));
        }
        else {
          $line=308;
          if ($opEqualY(minLetter,'C')) {
            $line=308;
            r=$cast(Character.class,$fix('c'));
          }
          else {
            $line=309;
            if ($opEqualY(minLetter,'D')) {
              $line=309;
              r=$cast(Character.class,$fix('d'));
            }
            else {
              $line=310;
              if ($opEqualY(minLetter,'E')) {
                $line=310;
                r=$cast(Character.class,$fix('e'));
              }
              else {
                $line=311;
                if ($opEqualY(minLetter,'F')) {
                  $line=311;
                  r=$cast(Character.class,$fix('f'));
                }
                else {
                  $line=312;
                  if ($opEqualY(minLetter,'G')) {
                    $line=312;
                    r=$cast(Character.class,$fix('g'));
                  }
                  else {
                    $line=313;
                    if ($opEqualY(minLetter,'H')) {
                      $line=313;
                      r=$cast(Character.class,$fix('h'));
                    }
                    else {
                      $line=314;
                      if ($opEqualY(minLetter,'I')) {
                        $line=314;
                        r=$cast(Character.class,$fix('i'));
                      }
                      else {
                        $line=315;
                        if ($opEqualY(minLetter,'J')) {
                          $line=315;
                          r=$cast(Character.class,$fix('j'));
                        }
                        else {
                          $line=316;
                          if ($opEqualY(minLetter,'K')) {
                            $line=316;
                            r=$cast(Character.class,$fix('k'));
                          }
                          else {
                            $line=317;
                            if ($opEqualY(minLetter,'L')) {
                              $line=317;
                              r=$cast(Character.class,$fix('l'));
                            }
                            else {
                              $line=318;
                              if ($opEqualY(minLetter,'M')) {
                                $line=318;
                                r=$cast(Character.class,$fix('m'));
                              }
                              else {
                                $line=319;
                                if ($opEqualY(minLetter,'N')) {
                                  $line=319;
                                  r=$cast(Character.class,$fix('n'));
                                }
                                else {
                                  $line=320;
                                  if ($opEqualY(minLetter,'O')) {
                                    $line=320;
                                    r=$cast(Character.class,$fix('o'));
                                  }
                                  else {
                                    $line=321;
                                    if ($opEqualY(minLetter,'P')) {
                                      $line=321;
                                      r=$cast(Character.class,$fix('p'));
                                    }
                                    else {
                                      $line=322;
                                      if ($opEqualY(minLetter,'Q')) {
                                        $line=322;
                                        r=$cast(Character.class,$fix('q'));
                                      }
                                      else {
                                        $line=323;
                                        if ($opEqualY(minLetter,'R')) {
                                          $line=323;
                                          r=$cast(Character.class,$fix('r'));
                                        }
                                        else {
                                          $line=324;
                                          if ($opEqualY(minLetter,'S')) {
                                            $line=324;
                                            r=$cast(Character.class,$fix('s'));
                                          }
                                          else {
                                            $line=325;
                                            if ($opEqualY(minLetter,'T')) {
                                              $line=325;
                                              r=$cast(Character.class,$fix('t'));
                                            }
                                            else {
                                              $line=326;
                                              if ($opEqualY(minLetter,'U')) {
                                                $line=326;
                                                r=$cast(Character.class,$fix('u'));
                                              }
                                              else {
                                                $line=327;
                                                if ($opEqualY(minLetter,'V')) {
                                                  $line=327;
                                                  r=$cast(Character.class,$fix('v'));
                                                }
                                                else {
                                                  $line=328;
                                                  if ($opEqualY(minLetter,'W')) {
                                                    $line=328;
                                                    r=$cast(Character.class,$fix('w'));
                                                  }
                                                  else {
                                                    $line=329;
                                                    if ($opEqualY(minLetter,'X')) {
                                                      $line=329;
                                                      r=$cast(Character.class,$fix('x'));
                                                    }
                                                    else {
                                                      $line=330;
                                                      if ($opEqualY(minLetter,'Y')) {
                                                        $line=330;
                                                        r=$cast(Character.class,$fix('y'));
                                                      }
                                                      else {
                                                        $line=331;
                                                        if ($opEqualY(minLetter,'Z')) {
                                                          $line=331;
                                                          r=$cast(Character.class,$fix('z'));
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=334;
      $result=r;
      if (true) break $try;
      $line=335;
      $rethrow(new RuntimeException("The function \"lowerCase(minLetter:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,P2.class,"lowerCase",$line);
    }
    return $result;
  }
}
