using gold.**


var currentString: String
var images: GArrayList()

var allSymbols: ISet
var keyWords: ISet
var skipChars: ISet


var  preKW : ISet
var  preOps :ISet

var StartOps:ISet
var Symbols1: ISet

var CharsSymbols1: ISet

var alphaUpper:ISet
var alphaLower :ISet
var digits :ISet

var alphaNum : ISet

var Out : ISet
var diffIdents : Boolean

var Ids: ISet
var translation : GHashTableMap()
    
chars(string) :=  {string.charAt(i)| 0 <= i <string.length() }


charsStrings(strings) := (∪ s | s ∈ strings: chars(s) )


elements(array) :=  {array[i]| 0 <= i < |array| }
         
prefixes(string) := {string.substring(0,i)| 1 <= i <= string.length() }
splits(string):= { ⟨string.substring(0,i),string.substring(i,string.length())⟩| 1 <= i <= string.length()-1 }

allPrefixes(strings):= (∪ s | s ∈ strings: prefixes(s) )

translationGet(q) :=  ((|q|=1 and q ∈Symbols1 and q != '\n')?q:translation.get(q))
 
procedure main(args:String[]) begin
    currentString := λ
    lexer = createTransducer()
    parser = createAutomaton()
	 
	 //testLexer(lexer)
	 
	 testLexerParser(lexer,parser)
end
  
  
procedure testLexer(M:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
    var string:String	
    
    
    
    inputA = elements(M.getInputAlphabet())
    
    
	input = ""
		
		
		print "----------------------------"
		print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine() 
       



	while string != "EXIT" do
		
	   string := string + " \n "	
       input := ""
       while string.charAt(0) != '$' do
              input := input + string 
              string:=sc.nextLine() + " \n  "
       end
       
       if chars(input) ⊆ inputA then
           currentString :=  λ
           images := GArrayList()
       	result:=M.acceptsString(input)    
			tokenStream := M.getOutputString()
		    
		
			print "The input was "+(result?"":"not ")+" accepted by the lexer."
			if result then 
				print "Token Stream:  "+ tokenStream 
			   print "Strings: "+images
			
			else print "Partial token Stream "+ tokenStream 
			end
			else print "Input contains invalid characters: "+ (chars(input) \ inputA)
		end
       print "----------------------------"
	
	   print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine()
       
end
print  "Good bye"
print  ""

end 


  
 
 
 
 function problems(q: String) begin
    
    
    if q in allSymbols then return false
    elseif |q|≤1  then return true
    else
    	for each ⟨s,t⟩ in splits(q) do
         if not problems(s) and not problems(t) then return false end
       end
       return true
	end
   	
 end
 
 
 	
 	
 	function translationPreOps(state) begin
 	 var x, y
 	 var q: String
 	 q:= state
 	 n := q.length()
 	 if n=0 then return λ
 	 elseif q  ∈ allSymbols then 
 	 	images.add(q)
 	 	return translationGet(q)  
 	 elseif n=1 then return λ
 	 else  
 	 	 for each ⟨s,t⟩ in splits(q) do
 	     	x:=translationPreOps(s)
       	y:=translationPreOps(t) 
          	if x≠ λ  and  y≠λ then 
            return x+y end
        end
        
 	    return   λ
 	     
   end

 end
 	
 	
 	
 
 procedure initialize() begin
 
 
 
     
 // **************  
	skipChars := {' ', '\t'}
	alphaUpper := ('A'‥'Z')

    alphaLower := ('a' ‥ 'z') 
	digits :=  ('0'‥'9')
	alphaNum := alphaUpper ∪ alphaLower ∪ digits  ∪ {'?'}      // Alphanumeric characters
	keyWords := {"MOVE","ROTATE", "RIGHT","LEFT","LOOK", "FREE", "DROP", "PICK","POP","CHECK","NOP","BLOCKEDP",
	              "IF","DEFINE","REPEAT","TO","BLOCK", "OUTPUT", "END",
	              "N","S","W","E","C", "B"}  // keywords
	allSymbols := {"(",")","\n","]", "[", "!" }
	
	
	// Symbols  and brackets, both single char and  multicharacter
	
	
	
	
	// TRANSLATION FOR ALL STRINGS IN KEYWORDS
	
	// Operators can be translated as themselves
	//  See
	  
	  translation.put("\n",'⋈') 
	 
	 translation.put("N",'N')
	 translation.put("S",'S')
	 translation.put("W",'W')
	 translation.put("E",'E')
	 translation.put("C",'C')
	 translation.put("B",'B')
	 
	 translation.put("NOP",'K')
	 translation.put("Num",'#')
	
	translation.put("MOVE",'M') 
	translation.put("RIGHT",'r') 
	translation.put("LEFT",'l') 
	translation.put("ROTATE",'R') 
	 
	 translation.put("LOOK",'L') 
	 translation.put("DROP",'D') 
	
	 translation.put("FREE",'F') 
	 translation.put("PICK",'P') 
	 translation.put("POP",'p') 
	 translation.put("CHECK",'c') 
	 translation.put("BLOCKEDP",'w') 
	 translation.put("BLOCK",'b') 
	 
	 
	 
	 translation.put("REPEAT",'X')
	
	
	 
	 translation.put("IF",'?') 
	 translation.put("DEFINE",'d') 
	 translation.put("TO",'T') 
	 translation.put("OUTPUT",'O') 
	 translation.put("END",'$') 
	 
	 
	 
	 translation.put("IdL",'v')  
	 translation.put("IdU",'V')  //if  there is no difference between names that start with caps and those that don't,
	    							//assign the same translation
	 
	  translation.put("Param",'x')
	 
	
	 // **************
	 
	    
	
end



function createTransducer():ITransducer begin
	
   initialize()
	
	preOps := allPrefixes(allSymbols)
 	preKW  := allPrefixes(keyWords)
 	
	StartOps := (∪ x | x ∈ allSymbols: {x.charAt(0)} ) 
	Symbols1 := ((∪ x | x ∈ StartOps: {""+x} ) ∩ allSymbols) \ {"\n"}
	CharsSymbols1 := (∪ x | x ∈ Symbols1: {x.charAt(0)} )
	
	
	Out   := 	CharsSymbols1 ∪ (∪ x | x ∈ translation.values(): {x} )

	print Out
   Ids:= {"IdU","IdL", "Param"}

   Q:= {"INIT","IdU","Num","Err","IdL","Param"} ∪ preKW ∪ preOps 
	
	print Q
	
	Σ:= alphaNum ∪ charsStrings(allSymbols) ∪ skipChars 
	∪ {':'}
	
	 
	q₀:="INIT"
	F:= {"INIT"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end

function δ(state,σ) begin
  
 
   var q: String
   q := state
   
   if q = "Err" then return "Err" 
   elseif q ∈ preOps  then
 		if q+σ in preOps then   return q+σ 
     	elseif problems(q) then  return "Err"
    	elseif σ ∈ skipChars  then return "INIT"	
     	elseif  σ in ('0'‥'9') then  return "Num"
       elseif  λ+σ in preKW then return λ+σ
       elseif  σ in alphaUpper  then return "IdU"	
       elseif  σ in alphaLower  then return "IdL"	
       elseif  λ+σ in preOps then	 return λ+σ
       else return "Err"
  		end	  	
	elseif  σ ∈ skipChars then return "INIT"	
    elseif q="INIT" and  σ in ('0'‥'9') then  return "Num"
    elseif q="INIT" and  λ+σ in preKW then return λ+σ
    elseif q = "INIT" and σ in alphaUpper  then return "IdU"
    elseif q = "INIT" and σ in alphaLower  then return "IdL"	
    elseif q = "INIT" and σ = ':'   then return "Param"	
    elseif q = "INIT" and  λ+σ in preOps then	 return λ+σ
    elseif q ∈ preKW  and (q+σ) in preKW then return q+σ 	
    elseif q ∈ preKW and σ in alphaNum  and q.charAt(0) ∈ alphaUpper then return "IdU"
    elseif q ∈ preKW and σ in alphaNum  and q.charAt(0) ∈ alphaLower then return "IdL"
    elseif q ∈ preKW  and  λ+σ in preOps then	 return λ+σ
    elseif q = "Num" and  σ in ('0'‥'9') then  return "Num"
    elseif q = "Num" and  λ+σ in preOps  then return λ+σ
     elseif q = "Num" and σ in alphaNum  then return "Err"	
    elseif q ∈ Ids  and σ in alphaNum  then return q
    elseif q ∈ Ids and  λ+σ in preOps  then return λ+σ
    else return "Err"
end	
end 

 


function g(q) begin
	return λ
end

function h(q,σ) begin
	var s: String
	
	
	s :=(σ = '\n')?"\\n": (λ+σ)
    
    
  if q ∈ preOps  then
       if σ ∈ skipChars and q ∈ allSymbols then 
       	images.add(currentString)
       	currentString := λ
       	return translationGet(q)
       elseif q+σ in preOps then 
       	currentString := currentString + s
       	return λ
       elseif σ ∈ (StartOps ∪ alphaNum) and q ∈ allSymbols then 
       	images.add(currentString)
       	currentString := λ  + s
       	return translationGet(q)
      elseif σ ∈ (StartOps ∪ alphaNum ∪ skipChars)  then 
      	   currentString := λ  + s
      	   return translationPreOps(q)
       else	
       	currentString := currentString + s
       	return λ
       end
     
     
   elseif q ∉ {"Err"} and σ ∈ skipChars  ∪ StartOps then
		if q="INIT" then 
		    currentString := (σ ∈ StartOps)? s:λ
			return λ
    	elseif translationGet(q)=null then 
					
         
        
          images.add(currentString)
          currentString := (σ ∈ skipChars  ∪ StartOps)?s:λ
       	 
       	 f= q.charAt(0)
       	 if f in alphaUpper then return translationGet("IdU")
       	 else 
       	 return translationGet("IdL")
       	end
    	else 
    		
    		images.add(currentString)
       	currentString := (σ ∈ skipChars  ∪ StartOps)?s:λ
    		return translationGet(q)
    	end
 		
 		
 		
    else 
    	 currentString := currentString + s
    	return  λ

end
end























///====   mini Parser===

function createAutomaton():IPushdownAutomaton begin
	
	Q:= {0,1,2,3,4,5,6,7,8,9,10,11,12,13} // states
	Σ:= Out		// tokens (input alphabet)
	Γ:= {'1','2','3'} 	// stack alphabet  ->  1: paréntesis redondo, 2: paréntesis cuadrado, 3: OUTPUT - END
	q₀:= 0		// init state
	F:= {0}		// final states
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)

M.delta(0,0,'⋈').ignore()

M.delta(0,1,'R').ignore()
M.delta(0,1,'M').ignore() //
M.delta(0,1,'r').ignore() //
M.delta(0,1,'l').ignore() //
M.delta(0,1,'D').ignore() //
M.delta(0,1,'F').ignore() //
M.delta(0,1,'P').ignore() //
M.delta(0,1,'p').ignore() //

M.delta(1,2,'#').ignore()
M.delta(1,2,'V').ignore()
M.delta(1,2,'v').ignore()
M.delta(1,2,'x').ignore()
M.delta(2,0,'⋈').ignore()

M.delta(0,3,'L').ignore() // LOOK
M.delta(3,2,'N').ignore() //
M.delta(3,2,'S').ignore() //
M.delta(3,2,'W').ignore() //
M.delta(3,2,'E').ignore() //

M.delta(0,4,'c').ignore() // CHECK
M.delta(4,1,'C').ignore() //
M.delta(4,1,'B').ignore() //

M.delta(0,0,'K').ignore() // NOP

M.delta(0,5,'(').push("1") // (BLOCK ‥.)
M.delta(5,0,'b').ignore() //
M.delta(0,2,')').pop("1") //

M.delta(0,6,'d').ignore() // DEFINE
M.delta(6,7,'v').ignore() //
M.delta(7,2,'#').ignore() //

M.delta(0,8,'X').ignore() // REPEAT n [‥.]
M.delta(8,9,'#').ignore()
M.delta(8,9,'V').ignore()
M.delta(8,9,'v').ignore()
M.delta(8,9,'x').ignore()
M.delta(9,0,'[').push("2")
M.delta(0,2,']').pop("2")

M.delta(0,10,'?').ignore() // IF BLOCKEDP [‥.]
M.delta(10,10,'!').ignore() //
M.delta(10,9,'w').ignore() //

M.delta(0,11,'T').ignore() // TO foo :p OUTPUT ‥. END
M.delta(11,12,'v').ignore() //
M.delta(11,12,'V').ignore() //
M.delta(12,12,'⋈').ignore() //
M.delta(12,12,'x').ignore() //
M.delta(12,0,'O').push("3") //
M.delta(0,2,'$').pop("3") //

M.delta(0,13,'v').ignore() // foo 1 a
M.delta(0,13,'V').ignore() //
M.delta(13,13,'#').ignore() //
M.delta(13,13,'V').ignore() //
M.delta(13,13,'v').ignore()//
M.delta(13,13,'x').ignore() // 
M.delta(13,2,'#').ignore() //
M.delta(13,2,'V').ignore() //
M.delta(13,2,'v').ignore() //
M.delta(13,2,'x').ignore() //

M.delta(0,0,'v').ignore() // foo (llamado de funcion sin parametros)
M.delta(0,0,'V').ignore() //



// states:
// 0: estado que se acepta, estado inicial
// 1: acaba de recibir una instruccion basica (MOVE, RIGHT, LEFT, ROTATE, DROP, FREE, PICK, POP,). Espera recibir un número de cualquier forma
// 2: Espera un newline para finalizar el comando.
// 3: acaba de recibir una instruccion LOOK. Espera recibir una dirección.
// 4: acaba de recibir una instruccion CHECK. Espera recibir C o B

// NOP no tiene estado

// 5: acaba de recibir un paréntesis '('. Espera recibir BLOCK
// 6: acaba de recibir una instruccion DEFINE, espera recibir un nombre en minuscula
// 7: acaba de recibir un nombre en minúscula. Espera recibir un número entero
// 8: acaba de recibir una instrucción REPEAT. Espera recibir un número de cualquier forma
// 9: acaba de recibir un número de cualquier forma. Espera recibir un paréntesis '['
// 10:  acaba de recibir una instrucción IF. Puede recibir '!'. Espera recibir un BLOCKEDP
// 11: acaba de recibir una instrucción TO. Espera recibir un nombre cualquiera
// 12: acaba de recibir un nombre. Puede recibir parámetros ':p' o newlines'. Espera recibir un OUTPUT.

// 13: acaba de recibir un nombre. Puede recibir varios números de cualquier forma



// Dudas:

// Rechaza:
// 1.
// REPEAT 3 [MOVE 1] 
// pide que MOVE 1 tenga newline, debería?


return M
end


procedure testLexerParser(M:ITransducer, P:IPushdownAutomaton) begin
	
	var sc:java.util.Scanner(System.$in)
    var string:String	
    
    
    
    inputA = elements(M.getInputAlphabet())
    
    
	input = ""
		
		
		print "----------------------------"
		print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine() 
       



	while string != "EXIT" do
		
	   string := string + "  \n "	
       input := ""
       while string.charAt(0) != '$' do
              input := input + string 
              string:=sc.nextLine() + " \n "
       end
       
       if chars(input) ⊆ inputA then
           currentString :=  λ
           images := GArrayList()
       	result:=M.acceptsString(input)
			tokenStream := M.getOutputString()
		
			print "The input was "+(result?"":"not ")+" accepted by the lexer."
			if result then 
				print "Token Stream:  "+ tokenStream 
			   print "Strings: "+images
			   result:=P.acceptsString(tokenStream )
         		print "Parser result: "+(result?"accepted ":"rejected ")
			
			else print "Partial token Stream "+ tokenStream 
			end
			else print "Input contains invalid characters: "+ (chars(input) \ inputA)
		end
       print "----------------------------"
	
	   print "Enter one or more lines. End with a single line with $"
       print "If you want to stop testing, enter EXIT"
       string:=sc.nextLine()
       
end
print  "Good bye"
print  ""

end 


/*
ROTATE 3

IF BLOCKEDP [MOVE 1
NOP]

(BLOCK
IF BLOCKEDP [MOVE 1
NOP]
LEFT 90
)



DEFINE one 1

TO foo :c :p
OUTPUT
   DROP :c
   FREE :p
	MOVE one
END
foo 1 3


TO goend
OUTPUT IF !BLOCKEDP [
   (BLOCK MOVE 1
		   goend)
   NOP
  ]
END
*/


